#!/usr/bin/env python3
"""
üîÆ Oracle Luck Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –†–∞–±–æ—á–∞—è –í–µ—Ä—Å–∏—è
@OracleLuck_Bot

–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import random
from datetime import datetime
from typing import List, Dict

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
    from telegram.constants import ParseMode
except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8294883971:AAG2hefSYbh-idoL_xhAeMhfZCvzARWFAls"
WEBAPP_URL = "https://your-mini-app-url.com"  # –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
users_db = {}

# ==================== –î–ê–ù–ù–´–ï ====================

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ (22 –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–∞)
TAROT_CARDS = [
    {"name": "–î—É—Ä–∞–∫", "emoji": "üÉè", "keywords": "–Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–≤–æ–±–æ–¥–∞"},
    {"name": "–ú–∞–≥", "emoji": "üé©", "keywords": "–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Å–∏–ª–∞ –≤–æ–ª–∏"},
    {"name": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "emoji": "üë∏", "keywords": "–∏–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã"},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "emoji": "üëë", "keywords": "–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ"},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "emoji": "ü§¥", "keywords": "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"},
    {"name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "emoji": "‚õ™", "keywords": "—Ç—Ä–∞–¥–∏—Ü–∏–∏, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å"},
    {"name": "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "emoji": "üíë", "keywords": "–ª—é–±–æ–≤—å, –≤—ã–±–æ—Ä"},
    {"name": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "emoji": "üèá", "keywords": "–ø–æ–±–µ–¥–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å"},
    {"name": "–°–∏–ª–∞", "emoji": "üí™", "keywords": "—Ö—Ä–∞–±—Ä–æ—Å—Ç—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ"},
    {"name": "–û—Ç—à–µ–ª—å–Ω–∏–∫", "emoji": "üßô", "keywords": "–º—É–¥—Ä–æ—Å—Ç—å, –ø–æ–∏—Å–∫"},
    {"name": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "emoji": "üé°", "keywords": "—Å—É–¥—å–±–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è"},
    {"name": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "emoji": "‚öñÔ∏è", "keywords": "—á–µ—Å—Ç–Ω–æ—Å—Ç—å, –ø—Ä–∞–≤–¥–∞"},
    {"name": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "emoji": "üôÉ", "keywords": "–∂–µ—Ä—Ç–≤–∞, –Ω–æ–≤—ã–π –≤–∑–≥–ª—è–¥"},
    {"name": "–°–º–µ—Ä—Ç—å", "emoji": "üíÄ", "keywords": "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ–Ω–µ—Ü"},
    {"name": "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "emoji": "üßò", "keywords": "–±–∞–ª–∞–Ω—Å, —Ç–µ—Ä–ø–µ–Ω–∏–µ"},
    {"name": "–î—å—è–≤–æ–ª", "emoji": "üòà", "keywords": "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –∏—Å–∫—É—à–µ–Ω–∏–µ"},
    {"name": "–ë–∞—à–Ω—è", "emoji": "üè∞", "keywords": "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ, –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"},
    {"name": "–ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê", "keywords": "–Ω–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"},
    {"name": "–õ—É–Ω–∞", "emoji": "üåô", "keywords": "–∏–ª–ª—é–∑–∏—è, —Å—Ç—Ä–∞—Ö–∏"},
    {"name": "–°–æ–ª–Ω—Ü–µ", "emoji": "‚òÄÔ∏è", "keywords": "—Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö"},
    {"name": "–°—É–¥", "emoji": "üìØ", "keywords": "–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ—â–µ–Ω–∏–µ"},
    {"name": "–ú–∏—Ä", "emoji": "üåç", "keywords": "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å"},
]

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
PREDICTIONS = [
    "‚ú® –¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫. –°–ª—É—à–∞–π –µ–µ.",
    "üí´ –°–∫–æ—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    "üåü –ù–µ –±–æ–π—Å—è –ø–µ—Ä–µ–º–µ–Ω. –û–Ω–∏ –≤–µ–¥—É—Ç —Ç–µ–±—è –∫ —Ç–≤–æ–µ–º—É –∏—Å—Ç–∏–Ω–Ω–æ–º—É –ø—É—Ç–∏.",
    "üíù –í —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ.",
    "üéØ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
    "üôè –¢–≤–æ—è —â–µ–¥—Ä–æ—Å—Ç—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —Ç–µ–±–µ —Å—Ç–æ—Ä–∏—Ü–µ–π.",
    "üîÆ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π ‚Äî –æ–Ω–∏ –ø–æ–≤—Å—é–¥—É.",
    "üí™ –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –î–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ.",
    "üßò –°–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è.",
    "üåà –¢–≤–æ—è –º–µ—á—Ç–∞ –±–ª–∏–∂–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è.",
]

# –¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
SPREADS = [
    {"id": "daily", "name": "üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è", "cards": 1, "free": True},
    {"id": "three", "name": "üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã", "cards": 3, "free": True},
    {"id": "love", "name": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è", "cards": 5, "free": True},
    {"id": "career", "name": "üíº –ö–∞—Ä—å–µ—Ä–∞", "cards": 5, "free": True},
    {"id": "advice", "name": "üåü –°–æ–≤–µ—Ç –¥–Ω—è", "cards": 3, "free": True},
]

# ==================== –§–£–ù–ö–¶–ò–ò ====================

def get_random_cards(count: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã"""
    return random.sample(TAROT_CARDS, min(count, len(TAROT_CARDS)))

def format_card(card: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É"""
    return f"{card['emoji']} **{card['name']}**\n_{card['keywords']}_"

def get_interpretation() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"""
    return random.choice([
        "üîÆ –ö–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
        "‚ú® –≠–Ω–µ—Ä–≥–∏—è —ç—Ç–∏—Ö –∫–∞—Ä—Ç –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏.",
        "üí´ –†–∞—Å–∫–ª–∞–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.",
        "üåü –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–≤–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å.",
        "üéØ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤.",
    ])

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="spreads"),
            InlineKeyboardButton("üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily")
        ],
        [
            InlineKeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_spreads_keyboard():
    """–ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    keyboard = []
    for spread in SPREADS:
        keyboard.append([
            InlineKeyboardButton(f"{spread['name']} ({spread['cards']} –∫–∞—Ä—Ç)", 
                               callback_data=f"spread_{spread['id']}")
        ])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
    return InlineKeyboardMarkup(keyboard)

# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users_db:
        users_db[user_id] = {
            "readings": [],
            "username": user.first_name
        }
    
    welcome_text = f"""
üîÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–∞–º –°—É–¥—å–±—ã, {user.first_name}!**

–Ø ‚Äî **–û—Ä–∞–∫—É–ª –£–¥–∞—á–∏**, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω –¢–∞—Ä–æ.

‚ú® **–ß—Ç–æ —è –º–æ–≥—É:**

üé¥ **5 —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤** (–≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
   ‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)
   ‚Ä¢ –¢—Ä–∏ –∫–∞—Ä—Ç—ã (3 –∫–∞—Ä—Ç—ã)
   ‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è (5 –∫–∞—Ä—Ç)
   ‚Ä¢ –ö–∞—Ä—å–µ—Ä–∞ (5 –∫–∞—Ä—Ç)
   ‚Ä¢ –°–æ–≤–µ—Ç –¥–Ω—è (3 –∫–∞—Ä—Ç—ã)

üîÆ **22 –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ**
   ‚Ä¢ –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã
   ‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

üìö **–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤**
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤

–ù–∞—á–Ω–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –º–∏—Å—Ç–∏–∫–∏! ‚ú®
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /daily"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    if user_id in users_db:
        last_daily = users_db[user_id].get("last_daily")
        if last_daily == today:
            await update.message.reply_text(
                "üé¥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã. ‚ú®",
                reply_markup=get_main_keyboard()
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É
    card = random.choice(TAROT_CARDS)
    prediction = random.choice(PREDICTIONS)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if user_id not in users_db:
        users_db[user_id] = {"readings": []}
    users_db[user_id]["last_daily"] = today
    
    card_text = f"""
üé¥ **–ö–ê–†–¢–ê –î–ù–Ø**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{format_card(card)}

**üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:**
{prediction}

**‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:**
{get_interpretation()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ü—É—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –æ—Å–≤–µ—â–∞–µ—Ç —Ç–≤–æ–π –ø—É—Ç—å!_ üí´
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    users_db[user_id]["readings"].append({
        "type": "daily",
        "date": datetime.now().isoformat(),
        "card": card["name"]
    })
    
    await update.message.reply_text(
        card_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è: {card['name']}")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /history"""
    user_id = update.effective_user.id
    
    if user_id not in users_db or not users_db[user_id]["readings"]:
        await update.message.reply_text(
            "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
            "–ü–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è! üîÆ",
            reply_markup=get_main_keyboard()
        )
        return
    
    readings = users_db[user_id]["readings"][-10:]
    
    history_text = "üìö **–ò–°–¢–û–†–ò–Ø –†–ê–°–ö–õ–ê–î–û–í**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    for i, reading in enumerate(reversed(readings), 1):
        date = datetime.fromisoformat(reading["date"]).strftime("%d.%m.%Y %H:%M")
        history_text += f"{i}. {reading['type'].upper()}\n   üìÖ {date}\n\n"
    
    await update.message.reply_text(
        history_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/daily - –ö–∞—Ä—Ç–∞ –¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥:**
1. –ù–∞–∂–º–∏ "üé¥ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥"
2. –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
3. –ü–æ–ª—É—á–∏ –∫–∞—Ä—Ç—ã –∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ

**–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:**
üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è - 1 –∫–∞—Ä—Ç–∞
üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã - 3 –∫–∞—Ä—Ç—ã
üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è - 5 –∫–∞—Ä—Ç
üíº –ö–∞—Ä—å–µ—Ä–∞ - 5 –∫–∞—Ä—Ç
üåü –°–æ–≤–µ—Ç –¥–Ω—è - 3 –∫–∞—Ä—Ç—ã

–í—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã! ‚ú®
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ====================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main":
        await query.edit_message_text(
            "üîÆ **–•—Ä–∞–º –°—É–¥—å–±—ã**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    
    # –ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    elif data == "spreads":
        await query.edit_message_text(
            "üé¥ **–í–´–ë–ï–†–ò –¢–ò–ü –†–ê–°–ö–õ–ê–î–ê**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "–í—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã! üéÅ",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_spreads_keyboard()
        )
    
    # –ö–∞—Ä—Ç–∞ –¥–Ω—è
    elif data == "daily":
        today = datetime.now().date()
        if user_id in users_db:
            last_daily = users_db[user_id].get("last_daily")
            if last_daily == today:
                await query.edit_message_text(
                    "üé¥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                    "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞. ‚ú®",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_main_keyboard()
                )
                return
        
        card = random.choice(TAROT_CARDS)
        prediction = random.choice(PREDICTIONS)
        
        if user_id not in users_db:
            users_db[user_id] = {"readings": []}
        users_db[user_id]["last_daily"] = today
        
        card_text = f"""
üé¥ **–ö–ê–†–¢–ê –î–ù–Ø**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{format_card(card)}

**üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:**
{prediction}

**‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:**
{get_interpretation()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ü—É—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –æ—Å–≤–µ—â–∞–µ—Ç —Ç–≤–æ–π –ø—É—Ç—å!_ üí´
        """
        
        users_db[user_id]["readings"].append({
            "type": "daily",
            "date": datetime.now().isoformat(),
            "card": card["name"]
        })
        
        await query.edit_message_text(
            card_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
    elif data.startswith("spread_"):
        spread_id = data.replace("spread_", "")
        spread = next((s for s in SPREADS if s["id"] == spread_id), None)
        
        if not spread:
            await query.answer("–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã
        cards = get_random_cards(spread["cards"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        reading_text = f"""
‚ú® **{spread['name'].upper()}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ö–∞—Ä—Ç:** {spread['cards']}

**üé¥ –ö–ê–†–¢–´:**

"""
        
        for i, card in enumerate(cards, 1):
            reading_text += f"{i}. {format_card(card)}\n\n"
        
        reading_text += f"""
**üîÆ –¢–û–õ–ö–û–í–ê–ù–ò–ï:**
{get_interpretation()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã —É–∫–∞–∂—É—Ç —Ç–µ–±–µ –ø—É—Ç—å!_ üí´
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if user_id not in users_db:
            users_db[user_id] = {"readings": []}
        
        users_db[user_id]["readings"].append({
            "type": spread_id,
            "date": datetime.now().isoformat(),
            "cards": [c["name"] for c in cards]
        })
        
        await query.edit_message_text(
            reading_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="spreads")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
            ])
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–∫–ª–∞–¥: {spread_id}")
    
    # –ò—Å—Ç–æ—Ä–∏—è
    elif data == "history":
        if user_id not in users_db or not users_db[user_id]["readings"]:
            await query.edit_message_text(
                "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
                "–ü–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è! üîÆ",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_keyboard()
            )
            return
        
        readings = users_db[user_id]["readings"][-10:]
        
        history_text = "üìö **–ò–°–¢–û–†–ò–Ø –†–ê–°–ö–õ–ê–î–û–í**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        for i, reading in enumerate(reversed(readings), 1):
            date = datetime.fromisoformat(reading["date"]).strftime("%d.%m.%Y %H:%M")
            history_text += f"{i}. {reading['type'].upper()}\n   üìÖ {date}\n\n"
        
        await query.edit_message_text(
            history_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
            ])
        )
    
    # –ü–æ–º–æ—â—å
    elif data == "help":
        help_text = """
‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å
/daily - –ö–∞—Ä—Ç–∞ –¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è
/help - –°–ø—Ä–∞–≤–∫–∞

**–†–∞—Å–∫–ª–∞–¥—ã:**
üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)
üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã (3 –∫–∞—Ä—Ç—ã)
üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è (5 –∫–∞—Ä—Ç)
üíº –ö–∞—Ä—å–µ—Ä–∞ (5 –∫–∞—Ä—Ç)
üåü –°–æ–≤–µ—Ç –¥–Ω—è (3 –∫–∞—Ä—Ç—ã)

–í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ‚ú®
        """
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
            ])
        )

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üîÆ Oracle Luck Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("daily", daily_command))
        application.add_handler(CommandHandler("history", history_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_callback))
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"ü§ñ Username: @OracleLuck_Bot")
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
