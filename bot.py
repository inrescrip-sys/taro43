#!/usr/bin/env python3
"""
üîÆ Oracle Luck Bot - –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π Telegram –±–æ—Ç —Å TON –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
@OracleLuck_Bot

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- 10 —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
- TON Web3 –ø–ª–∞—Ç–µ–∂–∏
- Mini App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (Gemini)
"""

import asyncio
import logging
import os
import random
from datetime import datetime, time
from typing import List, Dict, Optional

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    WebAppInfo,
    MenuButtonWebApp
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue
)
from telegram.constants import ParseMode

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8294883971:AAG2hefSYbh-idoL_xhAeMhfZCvzARWFAls"
WEBAPP_URL = "https://your-mini-app-url.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL Mini App
TON_WALLET_ADDRESS = "UQD..."  # TON –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –î–ê–ù–ù–´–ï ====================

# 78 –∫–∞—Ä—Ç –¢–∞—Ä–æ
TAROT_CARDS = {
    # –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã
    "major": [
        {"id": 0, "name": "–î—É—Ä–∞–∫", "emoji": "üÉè", "keywords": "–Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞"},
        {"id": 1, "name": "–ú–∞–≥", "emoji": "üé©", "keywords": "–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Å–∏–ª–∞ –≤–æ–ª–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"},
        {"id": 2, "name": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "emoji": "üë∏", "keywords": "–∏–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ"},
        {"id": 3, "name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "emoji": "üëë", "keywords": "–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ"},
        {"id": 4, "name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "emoji": "ü§¥", "keywords": "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å"},
        {"id": 5, "name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "emoji": "‚õ™", "keywords": "—Ç—Ä–∞–¥–∏—Ü–∏–∏, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"},
        {"id": 6, "name": "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "emoji": "üíë", "keywords": "–ª—é–±–æ–≤—å, –≤—ã–±–æ—Ä, –≥–∞—Ä–º–æ–Ω–∏—è"},
        {"id": 7, "name": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "emoji": "üèá", "keywords": "–ø–æ–±–µ–¥–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å, —Ä–µ—à–∏–º–æ—Å—Ç—å"},
        {"id": 8, "name": "–°–∏–ª–∞", "emoji": "üí™", "keywords": "—Ö—Ä–∞–±—Ä–æ—Å—Ç—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –≤–ª–∏—è–Ω–∏–µ"},
        {"id": 9, "name": "–û—Ç—à–µ–ª—å–Ω–∏–∫", "emoji": "üßô", "keywords": "–º—É–¥—Ä–æ—Å—Ç—å, –ø–æ–∏—Å–∫, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"},
        {"id": 10, "name": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "emoji": "üé°", "keywords": "—Å—É–¥—å–±–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ü–∏–∫–ª—ã"},
        {"id": 11, "name": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "emoji": "‚öñÔ∏è", "keywords": "—á–µ—Å—Ç–Ω–æ—Å—Ç—å, –ø—Ä–∞–≤–¥–∞, –∫–∞—Ä–º–∞"},
        {"id": 12, "name": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "emoji": "üôÉ", "keywords": "–∂–µ—Ä—Ç–≤–∞, –Ω–æ–≤—ã–π –≤–∑–≥–ª—è–¥, –ø–∞—É–∑–∞"},
        {"id": 13, "name": "–°–º–µ—Ä—Ç—å", "emoji": "üíÄ", "keywords": "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ–Ω–µ—Ü, –Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ"},
        {"id": 14, "name": "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "emoji": "üßò", "keywords": "–±–∞–ª–∞–Ω—Å, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –≥–∞—Ä–º–æ–Ω–∏—è"},
        {"id": 15, "name": "–î—å—è–≤–æ–ª", "emoji": "üòà", "keywords": "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –∏—Å–∫—É—à–µ–Ω–∏–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º"},
        {"id": 16, "name": "–ë–∞—à–Ω—è", "emoji": "üè∞", "keywords": "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ, —Ö–∞–æ—Å, –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"},
        {"id": 17, "name": "–ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê", "keywords": "–Ω–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"},
        {"id": 18, "name": "–õ—É–Ω–∞", "emoji": "üåô", "keywords": "–∏–ª–ª—é–∑–∏—è, —Å—Ç—Ä–∞—Ö–∏, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ"},
        {"id": 19, "name": "–°–æ–ª–Ω—Ü–µ", "emoji": "‚òÄÔ∏è", "keywords": "—Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –ø–æ–∑–∏—Ç–∏–≤"},
        {"id": 20, "name": "–°—É–¥", "emoji": "üìØ", "keywords": "–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ—â–µ–Ω–∏–µ, –ø—Ä–∏–∑–≤–∞–Ω–∏–µ"},
        {"id": 21, "name": "–ú–∏—Ä", "emoji": "üåç", "keywords": "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"},
    ],
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã - –ñ–µ–∑–ª—ã (–û–≥–æ–Ω—å)
    "wands": [
        {"name": "–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"},
        {"name": "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏—è"},
        {"name": "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "—ç–∫—Å–ø–∞–Ω—Å–∏—è, –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ"},
        {"name": "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"},
        {"name": "–ü—è—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Å–æ–ø–µ—Ä–Ω–∏—á–µ—Å—Ç–≤–æ"},
        {"name": "–®–µ—Å—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–ø–æ–±–µ–¥–∞, –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ"},
        {"name": "–°–µ–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–∑–∞—â–∏—Ç–∞, –≤—ã–∑–æ–≤"},
        {"name": "–í–æ—Å—å–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "—Å–∫–æ—Ä–æ—Å—Ç—å, –¥–≤–∏–∂–µ–Ω–∏–µ"},
        {"name": "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"},
        {"name": "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–±—Ä–µ–º—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"},
        {"name": "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "—ç–Ω—Ç—É–∑–∏–∞–∑–º, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"},
        {"name": "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–¥–µ–π—Å—Ç–≤–∏–µ, –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å"},
        {"name": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "—Ö–∞—Ä–∏–∑–º–∞, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"},
        {"name": "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤", "emoji": "üî•", "keywords": "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –≤–∏–¥–µ–Ω–∏–µ"},
    ]
}

# –¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤
SPREAD_TYPES = [
    {
        "id": "daily",
        "name": "üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
        "cards": 1,
        "price": 0,
        "description": "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    },
    {
        "id": "three_cards",
        "name": "üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã",
        "cards": 3,
        "price": 0,
        "description": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ"
    },
    {
        "id": "love",
        "name": "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "cards": 7,
        "price": 0.03,
        "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
    },
    {
        "id": "career",
        "name": "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É",
        "cards": 5,
        "price": 0,
        "description": "–†–∞–±–æ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã"
    },
    {
        "id": "celtic_cross",
        "name": "‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        "cards": 10,
        "price": 0.05,
        "description": "–ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ (10 –∫–∞—Ä—Ç)"
    },
    {
        "id": "choice",
        "name": "üéØ –†–∞—Å–∫–ª–∞–¥ –≤—ã–±–æ—Ä–∞",
        "cards": 7,
        "price": 0.03,
        "description": "–ü–æ–º–æ—â—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π"
    },
    {
        "id": "year",
        "name": "üìÖ –ì–æ–¥–æ–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥",
        "cards": 13,
        "price": 0.1,
        "description": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ (13 –∫–∞—Ä—Ç)"
    },
    {
        "id": "situation",
        "name": "üé≠ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é",
        "cards": 5,
        "price": 0,
        "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"
    },
    {
        "id": "advice",
        "name": "üåü –°–æ–≤–µ—Ç –¥–Ω—è",
        "cards": 3,
        "price": 0,
        "description": "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"
    },
    {
        "id": "chakra",
        "name": "üßò –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —á–∞–∫—Ä—ã",
        "cards": 7,
        "price": 0.05,
        "description": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    }
]

# 100+ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è "–ø–µ—á–µ–Ω—å–∫–∏"
DAILY_PREDICTIONS = [
    "‚ú® –¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫. –°–ª—É—à–∞–π –µ–µ.",
    "üí´ –°–∫–æ—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    "üåü –ù–µ –±–æ–π—Å—è –ø–µ—Ä–µ–º–µ–Ω. –û–Ω–∏ –≤–µ–¥—É—Ç —Ç–µ–±—è –∫ —Ç–≤–æ–µ–º—É –∏—Å—Ç–∏–Ω–Ω–æ–º—É –ø—É—Ç–∏.",
    "üíù –í —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ.",
    "üéØ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
    "üôè –¢–≤–æ—è —â–µ–¥—Ä–æ—Å—Ç—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —Ç–µ–±–µ —Å—Ç–æ—Ä–∏—Ü–µ–π.",
    "üîÆ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π ‚Äî –æ–Ω–∏ –ø–æ–≤—Å—é–¥—É.",
    "üí™ –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –î–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ.",
    "üßò –°–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è.",
    "üåà –¢–≤–æ—è –º–µ—á—Ç–∞ –±–ª–∏–∂–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è.",
    "üçÄ –û—Ç–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å. –í—Å–µ–ª–µ–Ω–Ω–∞—è –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç.",
    "üí° –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–≤–Ω–æ –º—É—á–∏–≤—à–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å.",
    "üëÅÔ∏è –ù–µ —Å—É–¥–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—é. –°—É—Ç—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ.",
    "‚ö° –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª—é–¥–µ–π.",
    "üéÅ –ë—É–¥—å –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
    "üíñ –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ª—é–±–≤–∏ –∏ —É–≤–∞–∂–µ–Ω–∏—è.",
    "üì¨ –°–∫–æ—Ä–æ —Ç–µ–±—è –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –¥—Ä—É–≥–∞.",
    "üèÜ –¢–≤–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É.",
    "ü§ù –ù–µ –±–æ–π—Å—è –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏. –û–Ω–∞ –ø—Ä–∏–¥–µ—Ç.",
    "üïäÔ∏è –°–µ–≥–æ–¥–Ω—è ‚Äî –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—â–µ–Ω–∏—è. –ù–∞—á–Ω–∏ —Å —Å–µ–±—è.",
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MongoDB/PostgreSQL)
users_db = {}

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def get_random_cards(count: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"""
    all_cards = TAROT_CARDS["major"] + TAROT_CARDS["wands"]
    selected = random.sample(all_cards, min(count, len(all_cards)))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
    for card in selected:
        card["reversed"] = random.choice([True, False])
    
    return selected

def format_card(card: Dict, position: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    emoji = card.get("emoji", "üé¥")
    name = card["name"]
    reversed_text = " (–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)" if card.get("reversed") else ""
    keywords = card.get("keywords", "")
    
    text = f"{emoji} **{name}**{reversed_text}\n"
    if position:
        text = f"**{position}:** " + text
    if keywords:
        text += f"_{keywords}_\n"
    
    return text

async def generate_interpretation(cards: List[Dict], spread_type: str, question: str = "") -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Gemini API
    """
    # Placeholder - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini
    interpretations = [
        "üîÆ –ö–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
        "‚ú® –≠–Ω–µ—Ä–≥–∏—è —ç—Ç–∏—Ö –∫–∞—Ä—Ç –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏.",
        "üí´ –†–∞—Å–∫–ª–∞–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.",
        "üåü –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–≤–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å.",
        "üéØ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤.",
    ]
    
    base_interpretation = random.choice(interpretations)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–æ —Ç–∏–ø—É —Ä–∞—Å–∫–ª–∞–¥–∞
    if spread_type == "love":
        base_interpretation += "\n\nüíï –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≥—Ä—è–¥—É—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    elif spread_type == "career":
        base_interpretation += "\n\nüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ."
    elif spread_type == "celtic_cross":
        base_interpretation += "\n\n‚ú® –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π."
    
    return base_interpretation

def get_user_balance(user_id: int) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TON"""
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
    return users_db[user_id]["balance"]

def add_balance(user_id: int, amount: float):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å"""
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
    users_db[user_id]["balance"] += amount

def deduct_balance(user_id: int, amount: float) -> bool:
    """–°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞"""
    current = get_user_balance(user_id)
    if current >= amount:
        users_db[user_id]["balance"] -= amount
        return True
    return False

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="readings_menu"),
            InlineKeyboardButton("üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")
        ],
        [
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å TON", callback_data="balance"),
            InlineKeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
        ],
        [
            InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL)),
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_readings_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    keyboard = []
    
    for spread in SPREAD_TYPES:
        price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if spread["price"] == 0 else f"{spread['price']} TON"
        button_text = f"{spread['name']} ‚Ä¢ {price_text}"
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"spread_{spread['id']}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_payment_keyboard(spread_id: str, amount: float) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} TON", callback_data=f"pay_{spread_id}_{amount}")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="readings_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="change_language")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users_db:
        users_db[user_id] = {
            "balance": 0.0,
            "readings": [],
            "notifications": True,
            "username": user.username or user.first_name
        }
    
    welcome_text = f"""
üîÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–∞–º –°—É–¥—å–±—ã, {user.first_name}!**

–Ø ‚Äî **–û—Ä–∞–∫—É–ª –£–¥–∞—á–∏**, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω –¢–∞—Ä–æ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏. 
–í–æ–∑–¥—É—Ö –∑–¥–µ—Å—å –ø—Ä–æ–ø–∏—Ç–∞–Ω –º–∞–≥–∏–µ–π, –∞ –∫–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ.

‚ú® **–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è:**

üé¥ **10 —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ**
   ‚Ä¢ –û—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –ö–µ–ª—å—Ç—Å–∫–æ–≥–æ –∫—Ä–µ—Å—Ç–∞
   ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –ø—Ä–µ–º–∏—É–º —Ä–∞—Å–∫–ª–∞–¥—ã

üåê **TON Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**
   ‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

üîÆ **AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è**
   ‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
   ‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è

üì± **Mini App**
   ‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
   ‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

üí´ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è**
   ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è
   ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö

–ù–∞—á–Ω–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –º–∏—Å—Ç–∏–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ú®
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
    await context.bot.set_chat_menu_button(
        chat_id=user_id,
        menu_button=MenuButtonWebApp(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –•—Ä–∞–º",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    )

async def daily_card_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /daily - –ö–∞—Ä—Ç–∞ –¥–Ω—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    if user_id in users_db:
        last_daily = users_db[user_id].get("last_daily")
        if last_daily and last_daily == today:
            await update.message.reply_text(
                "üé¥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã –∏–ª–∏ –æ—Ç–∫—Ä–æ–π Mini App –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø—ã—Ç–∞. ‚ú®",
                reply_markup=get_main_keyboard()
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    cards = get_random_cards(1)
    card = cards[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
    users_db[user_id]["last_daily"] = today
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = random.choice(DAILY_PREDICTIONS)
    
    card_text = f"""
üé¥ **–ö–ê–†–¢–ê –î–ù–Ø**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{format_card(card)}

**üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:**
{prediction}

**‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:**
{await generate_interpretation(cards, "daily")}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ü—É—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –æ—Å–≤–µ—â–∞–µ—Ç —Ç–≤–æ–π –ø—É—Ç—å —Å–µ–≥–æ–¥–Ω—è!_ üí´
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    users_db[user_id]["readings"].append({
        "type": "daily",
        "date": datetime.now().isoformat(),
        "cards": cards,
        "prediction": prediction
    })
    
    await update.message.reply_text(
        card_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    
    balance_text = f"""
üí∞ **–í–ê–® –ë–ê–õ–ê–ù–°**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** `{balance:.4f} TON`

üíé **–¶–µ–Ω—ã –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥—ã:**

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ:**
‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)
‚Ä¢ –¢—Ä–∏ –∫–∞—Ä—Ç—ã (3 –∫–∞—Ä—Ç—ã)
‚Ä¢ –ö–∞—Ä—å–µ—Ä–∞ (5 –∫–∞—Ä—Ç)
‚Ä¢ –°–∏—Ç—É–∞—Ü–∏—è (5 –∫–∞—Ä—Ç)

üí∞ **–ü—Ä–µ–º–∏—É–º:**
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è: 0.03 TON
‚Ä¢ –í—ã–±–æ—Ä: 0.03 TON  
‚Ä¢ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç: 0.05 TON
‚Ä¢ –ß–∞–∫—Ä—ã: 0.05 TON
‚Ä¢ –ì–æ–¥–æ–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥: 0.1 TON

–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ä–∞—Å–∫–ª–∞–¥–∞–º! ‚ú®
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        balance_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in users_db or not users_db[user_id]["readings"]:
        await update.message.reply_text(
            "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
            "–ü–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è –∏–ª–∏ —Å–¥–µ–ª–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥! üîÆ",
            reply_markup=get_main_keyboard()
        )
        return
    
    readings = users_db[user_id]["readings"][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
    
    history_text = "üìö **–ò–°–¢–û–†–ò–Ø –†–ê–°–ö–õ–ê–î–û–í**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    for i, reading in enumerate(reversed(readings), 1):
        date = datetime.fromisoformat(reading["date"]).strftime("%d.%m.%Y %H:%M")
        reading_type = reading["type"]
        card_count = len(reading["cards"])
        
        history_text += f"{i}. **{reading_type.upper()}** ‚Ä¢ {card_count} –∫–∞—Ä—Ç\n"
        history_text += f"   üìÖ {date}\n\n"
    
    history_text += "\nüí° _–û—Ç–∫—Ä–æ–π Mini App –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤!_"
    
    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ Mini App", web_app=WebAppInfo(url=f"{WEBAPP_URL}/history"))],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        history_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ü–æ–º–æ—â—å"""
    help_text = """
‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üì± –ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/daily - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å TON
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üé¥ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥:**
1. –ù–∞–∂–º–∏ "üé¥ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥"
2. –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
3. –û–ø–ª–∞—Ç–∏ (–µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–º–∏—É–º —Ä–∞—Å–∫–ª–∞–¥)
4. –ü–æ–ª—É—á–∏ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é

**üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:**
1. –ù–∞–∂–º–∏ "üí∞ –ë–∞–ª–∞–Ω—Å TON"
2. –í—ã–±–µ—Ä–∏ "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
3. –û—Ç–ø—Ä–∞–≤—å TON –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
4. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

**üåê Mini App:**
–û—Ç–∫—Ä–æ–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è:
‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
–ù–∞—Å—Ç—Ä–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!

**‚ùì –í–æ–ø—Ä–æ—Å—ã:**
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏ @support
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö Inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await query.edit_message_text(
            "üîÆ **–•—Ä–∞–º –°—É–¥—å–±—ã**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    
    # –ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    elif data == "readings_menu":
        await query.edit_message_text(
            "üé¥ **–í–´–ë–ï–†–ò –¢–ò–ü –†–ê–°–ö–õ–ê–î–ê**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é –≥—Ä–∞–Ω—å –∏—Å—Ç–∏–Ω—ã:\n\n"
            "üÜì - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n"
            "üí∞ - –¢—Ä–µ–±—É—é—Ç TON –±–∞–ª–∞–Ω—Å–∞",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_readings_keyboard()
        )
    
    # –ö–∞—Ä—Ç–∞ –¥–Ω—è
    elif data == "daily_card":
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        today = datetime.now().date()
        if user_id in users_db:
            last_daily = users_db[user_id].get("last_daily")
            if last_daily and last_daily == today:
                await query.edit_message_text(
                    "üé¥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                    "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º. ‚ú®",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_main_keyboard()
                )
                return
        
        cards = get_random_cards(1)
        card = cards[0]
        
        if user_id not in users_db:
            users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
        users_db[user_id]["last_daily"] = today
        
        prediction = random.choice(DAILY_PREDICTIONS)
        
        card_text = f"""
üé¥ **–ö–ê–†–¢–ê –î–ù–Ø**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{format_card(card)}

**üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:**
{prediction}

**‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:**
{await generate_interpretation(cards, "daily")}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ü—É—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –æ—Å–≤–µ—â–∞–µ—Ç —Ç–≤–æ–π –ø—É—Ç—å —Å–µ–≥–æ–¥–Ω—è!_ üí´
        """
        
        users_db[user_id]["readings"].append({
            "type": "daily",
            "date": datetime.now().isoformat(),
            "cards": cards,
            "prediction": prediction
        })
        
        await query.edit_message_text(
            card_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    elif data.startswith("spread_"):
        spread_id = data.replace("spread_", "")
        spread = next((s for s in SPREAD_TYPES if s["id"] == spread_id), None)
        
        if not spread:
            await query.answer("–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        if spread["price"] > 0:
            balance = get_user_balance(user_id)
            if balance < spread["price"]:
                await query.edit_message_text(
                    f"üí∞ **–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í**\n\n"
                    f"–î–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ **{spread['name']}** —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
                    f"**{spread['price']} TON**\n\n"
                    f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: `{balance:.4f} TON`\n\n"
                    f"–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! ‚ú®",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_payment_keyboard(spread_id, spread["price"])
                )
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥
        await perform_reading(query, user_id, spread)
    
    # –ë–∞–ª–∞–Ω—Å
    elif data == "balance":
        balance = get_user_balance(user_id)
        
        balance_text = f"""
üí∞ **–í–ê–® –ë–ê–õ–ê–ù–°**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** `{balance:.4f} TON`

üíé **–¶–µ–Ω—ã –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥—ã:**

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ:**
‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–Ω—è, –¢—Ä–∏ –∫–∞—Ä—Ç—ã, –ö–∞—Ä—å–µ—Ä–∞, –°–∏—Ç—É–∞—Ü–∏—è

üí∞ **–ü—Ä–µ–º–∏—É–º:**
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è: 0.03 TON
‚Ä¢ –í—ã–±–æ—Ä: 0.03 TON  
‚Ä¢ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç: 0.05 TON
‚Ä¢ –ß–∞–∫—Ä—ã: 0.05 TON
‚Ä¢ –ì–æ–¥–æ–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥: 0.1 TON
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            balance_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    elif data == "add_balance":
        await query.edit_message_text(
            f"""
üí≥ **–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ê–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON:**
`{TON_WALLET_ADDRESS}`

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –û—Ç–∫—Ä–æ–π —Å–≤–æ–π TON –∫–æ—à–µ–ª–µ–∫
2. –û—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∞–¥—Ä–µ—Å –≤—ã—à–µ
3. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (1-2 –º–∏–Ω)

**–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:** 0.01 TON

üí° _–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π TON Connect –≤ Mini App!_
            """,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=f"{WEBAPP_URL}/balance"))],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
            ])
        )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    elif data == "history":
        if user_id not in users_db or not users_db[user_id]["readings"]:
            await query.edit_message_text(
                "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
                "–ü–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è –∏–ª–∏ —Å–¥–µ–ª–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥! üîÆ",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_keyboard()
            )
            return
        
        readings = users_db[user_id]["readings"][-10:]
        
        history_text = "üìö **–ò–°–¢–û–†–ò–Ø –†–ê–°–ö–õ–ê–î–û–í**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        for i, reading in enumerate(reversed(readings), 1):
            date = datetime.fromisoformat(reading["date"]).strftime("%d.%m.%Y %H:%M")
            reading_type = reading["type"]
            card_count = len(reading["cards"])
            
            history_text += f"{i}. **{reading_type.upper()}** ‚Ä¢ {card_count} –∫–∞—Ä—Ç\n"
            history_text += f"   üìÖ {date}\n\n"
        
        history_text += "\nüí° _–û—Ç–∫—Ä–æ–π Mini App –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!_"
        
        await query.edit_message_text(
            history_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ Mini App", web_app=WebAppInfo(url=f"{WEBAPP_URL}/history"))],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif data == "settings":
        notifications = users_db.get(user_id, {}).get("notifications", True)
        notif_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notifications else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        
        await query.edit_message_text(
            f"""
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {notif_status}
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞—Ä—Ç–µ –¥–Ω—è

**üåê –Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π
_–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏!_

**üé® –¢–µ–º–∞:** –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            """,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_settings_keyboard()
        )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    elif data == "toggle_notifications":
        if user_id not in users_db:
            users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
        
        current = users_db[user_id].get("notifications", True)
        users_db[user_id]["notifications"] = not current
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        notif_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if not current else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        await query.edit_message_text(
            f"""
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {notif_status}
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞—Ä—Ç–µ –¥–Ω—è

**üåê –Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π
_–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏!_

**üé® –¢–µ–º–∞:** –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            """,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_settings_keyboard()
        )
    
    # –ü–æ–º–æ—â—å
    elif data == "help":
        help_text = """
‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üì± –ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å
/daily - –ö–∞—Ä—Ç–∞ –¥–Ω—è
/balance - –ë–∞–ª–∞–Ω—Å
/history - –ò—Å—Ç–æ—Ä–∏—è
/help - –°–ø—Ä–∞–≤–∫–∞

**üé¥ –†–∞—Å–∫–ª–∞–¥—ã:**
–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Üí –û–ø–ª–∞—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ‚Üí –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

**üí∞ TON –ü–ª–∞—Ç–µ–∂–∏:**
–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ä–∞—Å–∫–ª–∞–¥–æ–≤

**üåê Mini App:**
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

**‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @support
        """
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )

async def perform_reading(query, user_id: int, spread: Dict):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ"""
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    if spread["price"] > 0:
        if not deduct_balance(user_id, spread["price"]):
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã
    cards = get_random_cards(spread["cards"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞
    reading_text = f"""
‚ú® **{spread['name'].upper()}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–û–ø–∏—Å–∞–Ω–∏–µ:** {spread['description']}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:** {spread['cards']}

**üé¥ –ö–ê–†–¢–´:**

"""
    
    # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    positions = {
        "three_cards": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
        "celtic_cross": ["–°—É—Ç—å", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ", "–ü—Ä–æ—à–ª–æ–µ", "–ë—É–¥—É—â–µ–µ", "–°–æ–∑–Ω–∞–Ω–∏–µ", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", "–°–æ–≤–µ—Ç", "–û–∫—Ä—É–∂–µ–Ω–∏–µ", "–ù–∞–¥–µ–∂–¥—ã", "–ò—Ç–æ–≥"],
        "love": ["–í—ã", "–ü–∞—Ä—Ç–Ω–µ—Ä", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–°–æ–≤–µ—Ç"],
        "career": ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç", "–ò—Ç–æ–≥"],
        "choice": ["–°–∏—Ç—É–∞—Ü–∏—è", "–í–∞—Ä–∏–∞–Ω—Ç –ê", "–í–∞—Ä–∏–∞–Ω—Ç –ë", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ê", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ë", "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ê", "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ë"],
        "chakra": ["–ö–æ—Ä–Ω–µ–≤–∞—è", "–°–∞–∫—Ä–∞–ª—å–Ω–∞—è", "–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ", "–°–µ—Ä–¥–µ—á–Ω–∞—è", "–ì–æ—Ä–ª–æ–≤–∞—è", "–¢—Ä–µ—Ç–∏–π –≥–ª–∞–∑", "–ö–æ—Ä–æ–Ω–Ω–∞—è"],
        "situation": ["–°—É—Ç—å", "–ü—Ä–∏—á–∏–Ω–∞", "–†–∞–∑–≤–∏—Ç–∏–µ", "–°–æ–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"],
        "advice": ["–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å", "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å"],
    }
    
    spread_positions = positions.get(spread["id"], [f"–ö–∞—Ä—Ç–∞ {i+1}" for i in range(spread["cards"])])
    
    for i, card in enumerate(cards):
        position = spread_positions[i] if i < len(spread_positions) else f"–ö–∞—Ä—Ç–∞ {i+1}"
        reading_text += format_card(card, position) + "\n"
    
    # AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    interpretation = await generate_interpretation(cards, spread["id"])
    reading_text += f"\n**üîÆ –¢–û–õ–ö–û–í–ê–ù–ò–ï:**\n{interpretation}\n\n"
    reading_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n_–ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã —É–∫–∞–∂—É—Ç —Ç–µ–±–µ –ø—É—Ç—å!_ üí´"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0.0, "readings": [], "notifications": True}
    
    users_db[user_id]["readings"].append({
        "type": spread["id"],
        "date": datetime.now().isoformat(),
        "cards": cards,
        "spread_name": spread["name"],
        "interpretation": interpretation
    })
    
    await query.edit_message_text(
        reading_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="readings_menu")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ Mini App", web_app=WebAppInfo(url=f"{WEBAPP_URL}/reading"))],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

# ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    for user_id, user_data in users_db.items():
        if user_data.get("notifications", True):
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üîî **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!**\n\n"
                         "–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è –∂–¥–µ—Ç —Ç–µ–±—è. –£–∑–Ω–∞–π, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –í—Å–µ–ª–µ–Ω–Ω–∞—è! ‚ú®",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="daily_card")]
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("daily", daily_card_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00)
    job_queue = application.job_queue
    job_queue.run_daily(
        send_daily_reminder,
        time=time(hour=9, minute=0),
        days=(0, 1, 2, 3, 4, 5, 6)  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
    )
    
    logger.info("üîÆ Oracle Luck Bot –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main())
